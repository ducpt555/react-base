- Viết MyComponent.js, có hai cách viêt: func và class
- JSX CÚ PHÁP ĐẶC BIỆT
- Trong Component có thể viết js, hạn chế là 1 component thì chỉ viêt được 1 phần tử.
17. State.
- là js object, miêu tả trạng thái cảu ứng dụng, state của component có thể được cập nhật.
- Chức năng kiểm soát data hiện thị trên giao diện, ngay khi thay đổi thì sẽ cập nhât.
18. React dev tool
19. DOM Events - xử lý sự kiện với React
- Hộ trợ các event: hầu hết....
20. setState: cập nhập state cho React
- Merge state => react class: nghĩa là nếu mình chỉ cập nhật một thuộc tính trong object thì nó đủ thông minh để hiểu là chỉ cập nhật thuộc tính đó và giữ lại các thuộc tính khác.
21. from in react
- Dùng event onChange với input để bắt sự kiện người dùng gõ bàn phím
- Dùng event onSubmit với form để bắt sự kiện nhấn nút button, hoặc nhấn Enter
Không dùng event onClick với button vì sẽ không bắt được hành động người dùng
nhập input và nhấn Enter
- Dùng event.preventDefault( ) để cancel hành động mặc định của event. Ở đây,
đối với form và event submit, chúng ta sử dụng để không cho website bị load lại
(refresh)
22. Nesting Component - Component Cha Lồng Con
- Vì sao? Chia một component ra nhiều component dễ viết, viết ngắn,..
23. prop - properties
- Vì sao? Là đển component con lấy giá trị từ component cha.
24. Outputting list - Render Array/Object với React.
- Một đoạn code giống nhau nhiều lần => phải tối ưu
- DRY: don't repeat yourself
25. conditional Outputting2.Câu điều kiện
- Dùng câu điều kiện để “code ít hơn”
- Syntax: condition ? <expression if true> : <expression if false> => sau điều kiện thì trả về một giá trị thôi chứ không thể là một logic thực hiện được.
- Trong JSX thì: { }sẽ trả về một giá trị hoặc một chuỗi html, đầy là nơi ta viết xử lý js.
- Dùng &&: {true && <div></div>} để hiện...
- !: để lấy giá trả ngược lại
29. fragment: <><\> bỏ di v
30. variables: in ra trong runtun{string, number}. Còn obj,arr->{JSON.stringify(obj)}. Còn true/false thì ko hiện
34. StateFul/Stateless Component
    - Phân biệt Stateful/Stateless
Đối với React, một component, có sử dụng State để kiểm soát data, thì gọi là Stateful.
Còn với component, không sử dụng State, chỉ sử dụng props để hiển thị dữ liệu, thì được
gọi là Stateless
    - Cách chuyển đổi từ Stateful sang Stateless Component
        - Sử dụng Arrow function
        - Không sử dụng hàm constructor và keyword this
        - Không sử dụng hàm render, thay vào đấy là keyword return
        - Props được
35. useState Hook - Kiểm Soát State với Function Component
- useState dùng hook sử dụng được state với function component.
- syntax: const [ state, setState ] = useState(initValue);
36. Bài Tập: Sử Dụng useState Hook.
- React chuyển sang hook => theo react vì nó phát triển theo cách này.
38 useEffect Hook - Sử Dụng LifeCycle với React Function Component
    - Đối với Function component, code sẽ chạy theo thứ tự từ trên xuống dưới.
    - Sử dụng useEffect Hook như sau:
        - useEffect ( function_xử_lý, các_biến_phụ_thuộc )
47. Dùng bootstrap để tạo các html, css, js...nó là framework của cả 3 cái đó. Key word: react bootstrap.
48. Làm thế nào để bấm vào thì nó chuyển sang trang khác của web của mình(ví dụ như bấm vào trên facebook thì bấm vào feeds hay chuyển sang trang cá nhân thì không reload lại trang). Tóm lại là điều hướng sang trang khác mà không load lại.
 ---> Dùng: react router  -> nó có thẻ link( sẽ preventDefault:ngăn chặn) sẽ điều hướng mà không cần reload.
 ---> Để dùng: react router thì cần cài thư viện...
 ---> Tất nhiên là cần Import vào...để có thể hoạt động..thư viện mà.
 Bản chất của điều hướng trang là gì?
 - Nó Là từ một trang gốc đúng chứ ---> Bấm vào một thành phần nào đó như sẽ chuyển hướng, trong HTMl có thẻ <a>.
 - Nhưng thẻ <a> thì nó reload trang, và react có thằng thẻ link tương tự nhưng không reload.
 ---> Đã xử lý phần bấm vào thì chuyển và không reload --> <link to = "/..">
 - Vậy, bấm vào sẽ điều hướng đến trang khác --> phải có url để dẫn tới:
    - React có thư viện react router, nó sẽ giúp cho biết url và dẫn đến component chứa trang tương ứng:
    ```
     <BrowserRouter>
      <Routes>
        <Route path="/" element={<App />} />
        <Route path="/user" element={<User />} />
        <Route path="/admin" element={<Admin />} />
      </Routes>
    </BrowserRouter>
    ```
    - Mà React thì render từ index.js - App.js ...Thì App là trang gốc, tức chứa có phần để trỏ đến trang khác...
    => để nó là "/". Phía dưới là url và các component của trang tương ứng.
49. Nesting router: Nếu muốn từ web cha điều hướng sang web con mà vẫn giữ phần nội dung như Header thì làm sao?
    - Kế thừa hiển thì từ trang web cha,... và dùng <Outlet/> để gọi nội dung của web con cần hiện thị.
    - Thức ra đây không phải là kế thừa, mà xem nó fix cứng ở các trang thì đúng,... -> bài 51.
50. Active Link - navlink ---> Ví dụ: Home user... là phần header của wen cha -> điều hướng sang user vẫn dữ header dùng nesting..
    -> để nó nổi phần user trên header lên -> class: active trong bootstrap
    -> react thì dùng <NavLink> => auto có thẻ đó.
51. - Bản chất phần <Outlet> là để hiện thị phần nội dung của các web con + cái fix cứng như phần Header.
    -> Vậy giờ mình muốn bấm vào trang thì cái trang tổng có dữ liệu nghĩa là: HEADER(fix cứng) + nội dung main.
    -> Index router <- Nó là phần kết với với url tổng.
    -> Chịu trách nhiệm hiện thị phần nội dung trong trang tổng trên(HEADER(cai mà fix cứng) + nội dung).
